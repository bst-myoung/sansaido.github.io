---
interface Props {
    variant: "red" | "clear",
    title: {
        en: string,
        ja: string,
    },
    text: string,
    url: URL
}

const {variant, title, text, url} = Astro.props

const getVariantClasses = (variant: string) => {
    if(variant === "red") {
        return ["bg-radial-red", "text-white", "hover", ]
    } else if(variant === "clear") {
        return ["bg-white/70", "text-black"]
    } else {
        return [""]
    }
}
const variantClasses = getVariantClasses(variant)

// const getSvgClasses = (variant: string) => {
//     if(variant === "red") {
//         return ["ring-white"]
//         // return [""]
//     } else if(variant === "clear") {
//         return ["ring-red"]
//         // return [""]
//     } else {
//         return [""]
//     }
// }
// const svgClasses = getSvgClasses(variant)

const getPolygonClasses = (variant: string) => {
    if(variant === "red") {
        return ["fill-white"]
    } else if(variant === "clear") {
        return ["fill-red"]
    } else {
        return [""]
    }
}
const polygonClasses = getPolygonClasses(variant)

---
<a href={url.href}>
    <!--todo: fix shadow -->
    <div class:list={ [variantClasses, ["py-10 px-12", "rounded-2xl", "flex flex-col gap-6 shadow-2xl"]] }>
        <div class="bg-red text-white text-sm tracking-wider font-en uppercase w-fit px-4 py-1 rounded-full" set:html={title.en}/>
        <h3 class="font-serif text-4xl tracking-wider w-fit relative overflow-hidden py-2">
            <span class="relative" set:html={title.ja} />
            <span class="absolute" set:html={title.ja} />
        </h3>
        <div class="flex gap-10 pt-4 justify-between">
            <p class="leading-6" set:html={text}/>
            <svg class:list={["size-24 shrink-0 rounded-2xl p-9 shadow-lg bg-white/20 "]} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16.6 6.68">
                <polygon class:list={[polygonClasses]} points="16.6 3.34 10.71 0 10.71 2.84 0 2.84 0 3.84 10.71 3.84 10.71 6.68 16.6 3.34"/>
            </svg>
        </div>
    </div>
</a>

<style>
h3 {  
  background-image: linear-gradient(to right, var(--color-black) 0%, var(--color-black) 100%);  
  background-position: 100% 100%;
  background-repeat: no-repeat;
  background-size: 0px 100%;   
  transition: background-size 200ms ease;
  span {
    display: block;
    transition: transform 500ms, opacity 800ms;
    
  }
  span.relative {
    opacity: 1;
  }
  span.absolute {
    top: 50%;
    left: 0;
    opacity: 0;
    transform: translate3d(0%, 100%, 0)
  }
}

a > div {
    position: relative;
    overflow: hidden;
    transition: scale 200ms ease;
}

a:hover {
    > div {
        scale: 1.025;
    }
    h3 {
        /* background-image: linear-gradient(to right, blue 0%, blue 100%); */
        /* background-position: 0 calc(100% + 0.03rem);         */
        background-size: 100% 100%;   
        background-position: 0% 100%;
        color: var(--color-white);
        span.relative {
            transform: translateY(-100%);
            opacity: 0;
        }
        span.absolute {
            opacity: 1;
            transform: translate3d(0%, -50%, 0)
        }
    }
    svg {
        polygon {
            animation-name: animArrow;   
            animation-duration: 400ms;
            animation-iteration-count: 1;
            animation-fill-mode: both;            
        }
    }
}

@keyframes animArrow {
    0% {
        transform: translate3d(0%,0,0);
        opacity: 1;
    }
    49% {
        transform: translate3d(100%,0,0);
        opacity: 1;
    }
    50% {
        transform: translate3d(100%,0,0);   
        opacity: 0;
    }
    51% {
        opacity: 0;
        transform: translate3d(-100%,0,0);
    }
    52% {
        opacity: 1;
        transform: translate3d(-100%,0,0);
    }
    100% {        
        opacity: 1;
        transform: translate3d(0%,0,0);
    }
}


</style>